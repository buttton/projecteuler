/*
设有两个点（X1，Y1），（X2，Y2）决定一有方向的直线，方向从（X1,Y1)->(X2,Y2)。
则对任意点（X，Y），考虑下面式子：
 （Y - Y1）（X2 - X1） - （X - X1）（Y2 -Y1）
当 =0 时，表示（X，Y）在直线上面；
当 >0 时，表示（X，Y）在沿直线方向的左侧；
当 <0 时，表示（X，Y）在沿直线方向的右侧；

假设三个点按顺序输入的（顺或逆时针都行），设为（X1，Y1）（X2，Y2），（X3，Y3）。
很明显，三角形内部的点一定都在
(X1,Y1）->(X2,Y2),
(X2,Y2)->(X3,Y3),
(X3,Y3)->(X1,Y1)
的同一侧，而其它的点一定不符合要求的。
*/
%X(-175,41), Y(-421,-714), Z(574,-645)
import util.
main =>
		% read data from files
    Lines = read_file_lines("triangles.txt"), %network.txt   sets105.txt   triangles.txt
    Tri = new_list(Lines.length),
    read_data(Tri,Lines),

    Result = 0,
		foreach(A in Tri)		   
		   X1 = A[1], 
		   Y1 = A[2],
		   X2 = A[3], 
		   Y2 = A[4],
		   X3 = A[5],
		   Y3 = A[6],
		   
		   if (0-Y1)*(X2-X1)-(0-X1)*(Y2-Y1) >=0 then
		      if (0-Y2)*(X3-X2)-(0-X2)*(Y3-Y2)>=0 then
		          if (0-Y3)*(X1-X3)-(0-X3)*(Y1-Y3)>=0 then
		              %printf("include origin1"),
		              Result := Result+1
		          end
		       end
		   end,
		   
		   if (0-Y1)*(X2-X1)-(0-X1)*(Y2-Y1) <=0 then
		      if (0-Y2)*(X3-X2)-(0-X2)*(Y3-Y2)<=0 then
		          if (0-Y3)*(X1-X3)-(0-X3)*(Y1-Y3)<=0 then
		              %printf("include origin2"),
		              Result := Result+1
		          end
		       end
		   end
		end,   
	  printf("The number of triangles contain the origin is: %d", Result).


read_data(Tri,Lines)=>
    I = 1,
    foreach(Line in Lines)
        Tri [I]= Line.split(","),
        %printf("Tri[I].lenght: %d\n",Tri [I].length),
        foreach(J in 1..Tri [I].length)
            %printf("Tri[I,J].length: %d",Tri[I,J].length), printf("\n"),
            %write(Tri[I,J,1]),write(Tri[I,J,2]),write(Tri[I,J,3]),
            X := char_code(Tri[I,J,1]),

            if X==45 then
               %printf("negative number"),
               Tri[I,J] := sublist(Tri[I,J],2,length(Tri[I,J])),
               Tri[I,J] := -to_integer(Tri[I,J])
            else
            		Tri[I,J] := to_integer(Tri[I,J])
            end
            %printf("Tri[I,J]: %d\n",Tri[I,J])
        end,
	      I := I+1
    end.