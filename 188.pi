/*
#include <iostream>
using namespace std;

//computes a ^ b mod n
long long binaryExp(int a, int b, int n) {
    if (b == 0) {
        return 1;
    }
    else if (b % 2 == 0) {
        long long tmp = binaryExp(a, b / 2, n);
        return (tmp * tmp) % n;
    }
    else {
        return ((a % n) * binaryExp(a, b - 1, n)) % n;
    }
}

int main() {
    int DP[1856];

    int a = 1777;
    int b = 1855;

    DP[1] = a;
    for (int i = 2; i <= b; i++) {
        DP[i] = binaryExp(a, DP[i - 1], 100000000);
    }

    cout << DP[b] << endl;
}
*/
main=>
    DP = new_array(1856),
    foreach(J in 1..1856)
        DP[J]:=0
    end,

    A = 1777,
    B = 1855,

    DP[2] := A,
    foreach (I in 2..B) 
        DP[I+1] := binaryExp(A, DP[I], 100000000)
    end,
    
    printf("%w", DP[B+1]).
    
binaryExp(A,B,N)=Rtn =>
    if (B == 0) then
        Rtn = 1
    elseif (B mod 2 == 0) then
        Tmp = binaryExp(A, B // 2, N),
        Rtn = (Tmp * Tmp) mod N
    else 
        Rtn = ((A mod N) * binaryExp(A, B - 1, N)) mod N
    end.