/*
#include <stdio.h>
#include <time.h>
 
 
void printint64(long long int n)  {
    long long int M=n;
    if(M<0)  printf("-"),M=-M;
    int digit[20],i,len;
 
    for(i=0;i<20;i++)  {digit[i]=M%10,M/=10;}
    len=19;
    while((len>0)&&(digit[len]==0))
        len--;
        
    for(i=len;i>=0;i--) 
        printf("%d",digit[i]);
    
    printf("\n");
 
    return;
}
 
int main()  {
 
    double dtime=clock();
 
    long long int A[6562],B[6562],sum;
    int n,i,j,d,pow3,lpow3,k,p,c1,c2,x[3];
 
    A[0]=1;
    A[1]=1;
    A[2]=1;
    pow3=1;
    lpow3=3;
    for(n=2;n<=8;n++)  {
        pow3*=3;
        lpow3*=3;
        for(i=0;i<pow3;i++)  {
            B[i]=A[i];
            B[i+pow3]=A[i];
            B[i+2*pow3]=A[i];
        }
        p=pow3/3;
        for(k=1;k<n;k++)  {
            for(i=0;i<lpow3;i++)  
                A[i]=0;
            for(i=0;i<lpow3;i++)  {
                c1=(i/(3*p))%3;
                c2=(i/p)%3;
                d=i-p*c2;
                for(j=0;j<3;j++)  {
                    x[0]=1,x[1]=1,x[2]=1;
                    x[c1]=0;
                    x[c2]=0;
                    x[j]=0;
                    A[d+j*p]+=(long long int) B[i]*(x[0]+x[1]+x[2]);
                }
            }
            for(i=0;i<lpow3;i++)  B[i]=A[i];
            p/=3;
        }
    }
    sum=0;
    for(i=0;i<6561;i++)  {
        sum+=A[i];
    }
    printint64(sum);
 
    printf("Time=%.3lf sec.\n",(double) (clock()-dtime)/CLOCKS_PER_SEC);
 
    return 0;
}
*/
main=> 
    A=new_array(6563),
    B=new_array(6563),  %6561
    foreach(I in 1..6563)
        A[I]:=0,
        B[I]:=0
    end,
    
    Sum=0,
    
    D=0,Pow3=0,Lpow3=0,P=0,C1=0,C2=0,
    X={0,0,0},

    A[1]:=1,
    A[2]:=1,
    A[3]:=1,
    Pow3:=1,
    Lpow3:=3,
    
    foreach(N in 2..8)  
        Pow3 := Pow3*3,
        Lpow3 := Lpow3*3,
        foreach(I in 0..Pow3-1)  
            B[I+1] :=A[I+1],
            B[I+Pow3+1]:=A[I+1],
            B[I+2*Pow3+1]:=A[I+1]
        end,
        
        P := Pow3//3,
        foreach(K in 1..N-1)  
            foreach(I in 0..Lpow3-1)  
                A[I+1] := 0
            end,
            foreach(I in 0..Lpow3-1)  
                C1 := (I//(3*P)) mod 3,
                C2 := (I//P) mod 3,
                D := I-P*C2,
                foreach(J in 0..2)  
                    X[1]:=1,X[2]:=1,X[3]:=1,
                    X[C1+1]:=0,
                    X[C2+1]:=0,
                    X[J+1]:=0,
                    A[D+J*P+1] := A[D+J*P+1] + ( B[I+1]*(X[1]+X[2]+X[3]).to_integer() )
                end
            end,
            foreach(I in 0..Lpow3-1)
                B[I+1] := A[I+1]
            end,
            P := P//3
        end
    end,

    foreach(I in 1..6562)
        Sum := Sum+A[I]
    end,
    printint64(Sum).
    
printint64(N)=>
    M = N,
    if(M<0) then
        printf("-"),
        M := -M
    end,
    
    Digit=new_array(20),
    foreach(I in 1..20)
        Digit[I] := 0
    end,
    
    Len=0,
 
    foreach(I in 1..20)  
        Digit[I] := M mod 10,
        M := M//10
    end,
    
    Len := 19,
    while((Len>0)&&(Digit[Len+1]==0))  
        Len := Len-1
    end,
    
    foreach(I in Len..-1..0)
        printf("%d",Digit[I+1])
    end,
    
    printf("\n").